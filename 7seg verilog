`timescale 1ns / 1ps

module goon(
    input [2:0] in,
    input clk,
    input [3:0] thres,
    output reg led,
    output [6:0] seg,
    output [3:0] an
);
    wire [3:0] acc;
    reg [3:0] prev = 0;
    wire slow;

    wire [6:0] seg_out;
    wire [3:0] an_out;

    clkgen clk_div(clk, slow);
    acc adder(in, prev, acc);

    // Multi-digit display control
    seg_mux display_driver(
        .clk(clk),
        .val0(4'b0000),       // Leftmost digit
        .val1(4'b0000),
        .val2(4'b0000),
        .val3(acc),           // Rightmost digit = accumulator
        .seg(seg),
        .an(an)
    );

    always @(posedge slow) begin
        if (acc > thres) begin
            led <= 1;
            prev <= 0;
        end else begin
            led <= 0;
            prev <= acc;
        end
    end
endmodule

module acc(
    input [2:0] in,
    input [3:0] prev,
    output [3:0] acc
);
    assign acc = prev + in;
endmodule

// Slow clock generator (2 Hz for logic updates)
module clkgen(
    input wire clk,
    output wire slow
);
    reg [25:0] count = 0;
    reg tmp_clk = 0;

    assign slow = tmp_clk;

    always @(posedge clk) begin
        if (count < 25_000_000)
            count <= count + 1;
        else begin
            tmp_clk <= ~tmp_clk;
            count <= 0;
        end
    end
endmodule

// Multiplexed 7-segment driver (uses clk to rotate anodes)
module seg_mux(
    input clk,
    input [3:0] val0, val1, val2, val3,
    output reg [6:0] seg,
    output reg [3:0] an
);
    reg [1:0] sel = 0;
    reg [16:0] refresh_counter = 0; // ~1ms refresh rate

    wire [3:0] curr_val = (sel == 2'b00) ? val0 :
                          (sel == 2'b01) ? val1 :
                          (sel == 2'b10) ? val2 : val3;

    always @(posedge clk) begin
        refresh_counter <= refresh_counter + 1;
        if (refresh_counter == 100_000) begin // ~1ms at 100 MHz
            sel <= sel + 1;
            refresh_counter <= 0;
        end
    end

    always @(*) begin
        case(sel)
            2'b00: an = 4'b1110;
            2'b01: an = 4'b1101;
            2'b10: an = 4'b1011;
            2'b11: an = 4'b0111;
        endcase
    end

    always @(*) begin
        case(curr_val)
            4'h0: seg = 7'b0000001;
            4'h1: seg = 7'b1001111;
            4'h2: seg = 7'b0010010;
            4'h3: seg = 7'b0000110;
            4'h4: seg = 7'b1001100;
            4'h5: seg = 7'b0100100;
            4'h6: seg = 7'b0100000;
            4'h7: seg = 7'b0001111;
            4'h8: seg = 7'b0000000;
            4'h9: seg = 7'b0000100;
            4'hA: seg = 7'b0001000;
            4'hB: seg = 7'b1100000;
            4'hC: seg = 7'b0110001;
            4'hD: seg = 7'b1000010;
            4'hE: seg = 7'b0110000;
            4'hF: seg = 7'b0111000;
            default: seg = 7'b1111111;
        endcase
    end
endmodule
