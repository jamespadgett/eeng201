`timescale 1ns / 1ps

module goon(
    input [2:0] in,
    input clk,
    input [3:0] thres,
    output led,
    output [6:0] seg,
    output [3:0] an
);

    wire [3:0] prev;
    wire slow;
    wire reset_fast;
    wire reset_slow;
    wire [3:0] acc;

    acc a1(in, slow, prev, reset_slow, acc);
    store a2(acc, clk, reset_fast, prev);
    clkgen a3(clk, slow);
    comp a4(clk, acc, thres, led, reset_fast);
    decoder d1(acc, seg);

    assign an = 4'b1110; // Enable only the rightmost 7-segment digit

    // Synchronize reset from fast to slow domain
    reg r1 = 0, r2 = 0;
    always @(posedge slow) begin
        r1 <= reset_fast;
        r2 <= r1;
    end
    assign reset_slow = r2;

endmodule

module acc(
    input [2:0] in,
    input slow,
    input [3:0] prev,
    input reset,
    output reg [3:0] acc
);
    always @(posedge slow or posedge reset) begin
        if (reset)
            acc <= 0;
        else
            acc <= prev + in;
    end
endmodule

module store(
    input [3:0] acc,
    input clk,
    input reset,
    output reg [3:0] prev
);
    always @(negedge clk or posedge reset) begin
        if (reset)
            prev <= 0;
        else
            prev <= acc;
    end
endmodule

module clkgen(
    input wire clk,
    output wire slow
);
    reg [25:0] count = 0;
    reg tmp_clk = 0;

    assign slow = tmp_clk;

    always @(posedge clk) begin
        if (count < 25_000_000)
            count <= count + 1;
        else begin
            tmp_clk <= ~tmp_clk;
            count <= 0;
        end
    end
endmodule

module comp(
    input clk,
    input [3:0] acc,
    input [3:0] thres,
    output reg led,
    output reg reset
);
    always @(posedge clk) begin
        if (acc > thres) begin
            reset <= 1;
            led <= 1;
        end else begin
            reset <= 0;
            led <= 0;
        end
    end
endmodule

module decoder(
    input [3:0] value,
    output reg [6:0] seg
);
    always @(*) begin
        case(value)
            4'h0: seg = 7'b0000001;
            4'h1: seg = 7'b1001111;
            4'h2: seg = 7'b0010010;
            4'h3: seg = 7'b0000110;
            4'h4: seg = 7'b1001100;
            4'h5: seg = 7'b0100100;
            4'h6: seg = 7'b0100000;
            4'h7: seg = 7'b0001111;
            4'h8: seg = 7'b0000000;
            4'h9: seg = 7'b0000100;
            4'hA: seg = 7'b0001000;
            4'hB: seg = 7'b1100000;
            4'hC: seg = 7'b0110001;
            4'hD: seg = 7'b1000010;
            4'hE: seg = 7'b0110000;
            4'hF: seg = 7'b0111000;
            default: seg = 7'b1111111;
        endcase
    end
endmodule

